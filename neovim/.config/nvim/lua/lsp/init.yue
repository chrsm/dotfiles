import "macros" as { $ }

handlers =
  clangd:
    cmd: { 'clangd' }
    filetypes: { 'c', 'cpp', 'objc', 'objcpp', 'cuda', 'cc', 'hh' }
    root_markers:
      * '.clangd'
      * '.clangd-tidy'
      * '.clangd-format'
      * 'compile_commands.json'
      * 'compile_flags.txt'
      * 'configure.ac'
      * '.git'
    settings: {}
  phpactor:
    cmd: { 'phpactor', 'language-server' }
    filetypes: { '.php' }
    root_markers: { '.git', 'composer.json', '.phpactor.json', '.phpactor.yml' }
    workspace_required: true
  buf_ls:
    cmd: { 'buf', 'beta', 'lsp', '--timeout=0', '--log-format=text' }
    filetypes: { '.proto' }
    root_markers: { 'buf.yaml', '.git' }
  gopls:
    cmd: { 'gopls' }
    filetypes: { 'go', 'go_gen' }
    root_markers:
      * 'go.mod'
      * 'go.work'
      * '.git'
    -- https://github.com/golang/tools/blob/master/gopls/doc/analyzers.md,
    -- https://github.com/golang/tools/blob/master/gopls/doc/inlayHints.md
    settings:
      env:
        GOFLAGS: '-tags=postgres integration'
      buildFlags: { '-tags=postgres integration' }
      gofumpt: true
      staticcheck: true
      codelenses:
        generate: true
        regenerate_cgo: true
        tidy: true
        vendor: true
        test: true
      hints:
        assignVariableTypes: false
        compositeLiteralFields: false
        compositeLiteralTypes: false
        constantValues: true
        functionTypeParameters: false
        parameterNames: false
        rangeVariableTypes: false
      analyses:
        appends: true
        shadow: true
        unusedvariable: true
        useany: true
        asmdecl: true
        assign: true
        atomic: true
        atomicalign: true
        bools: true
        buildtag: true
        cgocall: true
        composites: true
        copylocks: true
        deepequalerrors: true
        defers: true
        deprecated: true
        directive: true
        embed: true
        errorsas: true
        fillreturns: true
        framepointer: true
        gofix: true
        hostport: true
        httpresponse: true
        ifaceassert: true
        infertypeargs: true
        loopclosure: true
        lostcancel: true
        maprange: true
        modernize: true
        nilfunc: true
        nilness: true
        nonewvars: true
        noresultvalues: true
        printf: true
        recursiveiter: true
        shift: true
        sigchanyzer: true
        simplifycompositelit: true
        simplifyrange: true
        simplifyslice: true
        slog: true
        sortslice: true
        stdmethods: true
        stringintconv: true
        structtag: true
        tests: true
        timeformat: true
        unmarshal: true
        unreachable: true
        unsafeptr: true
        unusedfunc: true
        unusedparams: true
        unusedresult: true
        unusedwrite: true
        waitgroup: true
        yield: true
        -- staticcheck
        QF1001: true
        QF1002: true
        QF1003: true
        QF1004: true
        QF1005: true
        QF1006: true
        QF1007: true
        QF1008: true
        QF1009: true
        QF1010: true
        QF1011: true
        QF1012: true
        S1000: true
        S1001: true
        S1002: true
        S1003: true
        S1004: true
        S1005: true
        S1006: true
        S1007: true
        S1008: true
        S1009: true
        S1010: true
        S1011: true
        S1012: true
        S1016: true
        S1017: true
        S1018: true
        S1019: true
        S1020: true
        S1021: true
        S1023: true
        S1024: true
        S1025: true
        S1028: true
        S1029: true
        S1030: true
        S1031: true
        S1032: true
        S1033: true
        S0134: true
        S1036: true
        S1037: true
        S1038: true
        S1039: true
        S1040: true
        SA1000: true
        SA1001: true
        SA1002: true
        SA1003: true
        SA1004: true
        SA1005: true
        SA1007: true
        SA1008: true
        SA1010: true
        SA1011: true
        SA1012: true
        SA1013: true
        SA1014: true
        SA1015: true
        SA1016: true
        SA1017: true
        SA1018: true
        SA1020: true
        SA1021: true
        SA1023: true
        SA1024: true
        SA1025: true
        SA1026: true
        SA1027: true
        SA1028: true
        SA1029: true
        SA1030: true
        SA1031: true
        SA1032: true
        SA2001: true
        SA2002: true
        SA2003: true
        SA3000: true
        SA3001: true
        SA4000: true
        SA4001: true
        SA4003: true
        SA4004: true
        SA4005: true
        SA4006: true
        SA4008: true
        SA4009: true
        SA4010: true
        SA4011: true
        SA4012: true
        SA4013: true
        SA4014: true
        SA4015: true
        SA4016: true
        SA4017: true
        SA4018: true
        SA4019: true
        SA4020: true
        SA4022: true
        SA4023: true
        SA4024: true
        SA4025: true
        SA4026: true
        SA4027: true
        SA4028: true
        SA4029: true
        SA4030: true
        SA4031: true
        SA4032: true
        SA4033: true
        SA5000: true
        SA5001: true
        SA5002: true
        SA5003: true
        SA5004: true
        SA5005: true
        SA5007: true
        SA5008: true
        SA5010: true
        SA5011: true
        SA5012: true
        SA6000: true
        SA6001: true
        SA6002: true
        SA6003: true
        SA6005: true
        SA6006: true
        SA9001: true
        SA9002: true
        SA9003: true
        SA9004: true
        SA9005: true
        SA9006: true
        SA9007: true
        SA9008: true
        SA9009: true
        ST1000: true
        ST1001: true
        ST1003: true
        ST1005: true
        ST1006: true
        ST1008: true
        ST1011: true
        ST1012: true
        ST1013: true
        ST1015: true
        ST1016: true
        ST1017: true
        ST1018: true
        ST1019: true
        ST1020: true
        ST1021: true
        ST1022: true
        ST1023: true

old_handlers =
  * (name) ->
    import 'lspconfig' as lsp_c
    lsp_c[name].setup {}
  clangd: (->
    import 'lspconfig' as lsp_c

    lsp_c.clangd.setup
      filetypes: { 'c', 'cpp', 'objc', 'cuda' }
  )


keyb = (key, cmd, desc) ->
  unless (cmd\sub -(#cmd)) == ')'
    cmd ..= '()'

  { key, "<cmd>lua #{ cmd }<cr>", desc: desc, remap: false }

export default {
  setup: ->
    import 'lsp-zero' as lsp_z
    import 'mason'
    import 'mason-lspconfig' as lsp_m
    import 'which-key' as wk

    vim.lsp.inlay_hint.enable!
    fmt_g = vim.api.nvim_create_augroup 'LspFormatting', {}

    lsp_z.on_attach (c, bufnr) ->
      keyb_opts =
        mode: 'n'
        noremap: true
        silent: true
        buffer: bufnr

      if c.server_capabilities.documentFormattingProvider
        vim.api.nvim_create_autocmd 'BufWritePre',
          group: fmt_g
          buffer: bufnr
          callback: ->
            vim.lsp.buf.format!

      wk.add {
        keyb 'K', 'vim.lsp.buf.hover', 'hover documentation'
        keyb 'gd', 'vim.lsp.buf.definition', 'go to definition'
        keyb 'gD', 'vim.lsp.buf.declaration', 'go to declaration'
        keyb 'gi', 'vim.lsp.buf.implementation', 'go to implementation'
        keyb 'go', 'vim.lsp.buf.type_definition', 'go to typedef'
        keyb 'gr', 'vim.lsp.buf.references', 'list references'
        keyb 'gs', 'vim.lsp.buf.signature_help', 'show function signature'

        keyb 'glc', 'vim.lsp.buf.code_action', 'code actions for symbol'
        keyb 'gli', 'vim.lsp.buf.incoming_calls', 'references/uses of symbol'
        keyb 'glo', 'vim.lsp.buf.outgoing_calls', 'outgoing calls from fn'
      }, keyb_opts

      nil

    lsp_z.set_sign_icons
      error: '✘',
      warn: '▲',
      hint: '⚑',
      info: '»'

    mason.setup!
    lsp_m.setup!

    for k, v in pairs handlers
      vim.lsp.config[k] = v
      vim.lsp.enable k
}

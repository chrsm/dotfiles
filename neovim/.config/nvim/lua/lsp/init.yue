import "macros" as { $ }

per_lang =
  gopls:
    inlay: true

handlers =
  * (name) ->
    import 'lspconfig' as lsp_c
    lsp_c[name].setup {}
  gopls: (->
    import 'lsp-zero' as lsp_z
    import 'lspconfig' as lsp_c

    lsp_c.gopls.setup
      settings:
        -- https://github.com/golang/tools/blob/master/gopls/doc/analyzers.md,
        -- https://github.com/golang/tools/blob/master/gopls/doc/inlayHints.md
        -- only enable or configure non-defaults
        gopls:
          analyses:
            shadow: true
            unusedvariable: true
            useany: true
          codelenses:
            generate: false
            gc_details: true
            regenerate_cgo: true
            run_govulncheck: true
            tidy: true
            upgrade_dependency: true
            vendor: true
          hints:
            assignVariableTypes: false
            compositeLiteralFields: false
            compositeLiteralTypes: false
            constantValues: true
            functionTypeParameters: false
            parameterNames: false
            rangeVariableTypes: false
  )
  --[[bufls: (->
    import 'lspconfig' as lsp_c

    lsp_c.bufls.setup {}
  )]]
  clangd: (->
    import 'lspconfig' as lsp_c

    lsp_c.clangd.setup
      filetypes: { 'c', 'cpp', 'objc', 'cuda' }
  )


keyb = (key, cmd, desc) ->
  unless (cmd\sub -(#cmd)) == ')'
    cmd ..= '()'

  { key, "<cmd>lua #{ cmd }<cr>", desc: desc, remap: false }

export default {
  setup: ->
    import 'lsp-zero' as lsp_z
    import 'mason' as mason
    import 'mason-lspconfig' as lsp_m
    import 'which-key' as wk

    vim.lsp.inlay_hint.enable!
    fmt_g = vim.api.nvim_create_augroup 'LspFormatting', {}

    lsp_z.on_attach (c, bufnr) ->
      keyb_opts =
        mode: 'n'
        noremap: true
        silent: true
        buffer: bufnr

      if c.server_capabilities.documentFormattingProvider
        vim.api.nvim_create_autocmd 'BufWritePre',
          group: fmt_g
          buffer: bufnr
          callback: ->
            vim.lsp.buf.format!

      wk.add {
        keyb 'K', 'vim.lsp.buf.hover', 'hover documentation'
        keyb 'gd', 'vim.lsp.buf.definition', 'go to definition'
        keyb 'gD', 'vim.lsp.buf.declaration', 'go to declaration'
        keyb 'gi', 'vim.lsp.buf.implementation', 'go to implementation'
        keyb 'go', 'vim.lsp.buf.type_definition', 'go to typedef'
        keyb 'gr', 'vim.lsp.buf.references', 'list references'
        keyb 'gs', 'vim.lsp.buf.signature_help', 'show function signature'
      }, keyb_opts

      nil

    lsp_z.set_sign_icons
      error: '✘',
      warn: '▲',
      hint: '⚑',
      info: '»'

    mason.setup!
    lsp_m.setup { :handlers }
}

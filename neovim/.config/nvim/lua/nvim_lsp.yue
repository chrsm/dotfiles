import "macros" as { $ }
import "lspconfig" as lsp
import "lsp_signature" as lsp_sig
import "cmp_nvim_lsp" as cap

--($do_cfg "cmp")!

on_attach = (c, buf) ->
  $setopt buf, 'omnifunc', 'v:lua.vim.lsp.omnifunc'
  
  opts =
    noremap: true
    silent: true

  $setkey buf, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts
  $setkey buf, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts

  -- TODO: import more? don't really use any of those..
  -- $setkey('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)

  if c.server_capabilities.documentFormattingProvider
    $setkey buf, 'n', '<leader>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts
  else
    $setkey buf, 'n', '<leader>f', '<cmd>lua vim.lsp.buf.range_formatting()<CR>', opts

  fmtcaps = [[
      autocmd!
        autocmd BufWritePre * Neoformat
      augroup END
  ]]

  if c.server_capabilities.documentHighlightProvider
    fmtcaps = [[
        augroup ls_document_highlight
            autocmd!
            autocmd CursorHold  <buffer> lua vim.lsp.buf.document_highlight()
            autocmd CursorHoldI <buffer> lua vim.lsp.buf.document_highlight()
            autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
            autocmd BufWritePre <buffer> lua vim.lsp.buf.format(nil, 5000)
        augroup END
      ]]

  vim.api.nvim_exec fmtcaps, false

  lsp_sig.on_attach!

golang =
  capabilities: cap.update_capabilities vim.lsp.protocol.make_client_capabilities!
  on_attach: on_attach
  flags:
    debounce_text_changes: 150
    codelens:
      generate: true
      gc_details: true
      vendor: true
    semanticTokens: true
    experimentalWorkspaceModule: true
    settings:
      gopls:
        allExperiments: true

export default {
  setup: ->
    lsp.gopls.setup golang

    with vim.lsp
      .set_log_level "WARN"

      opts =
        underline: true
        virtual_text: false
        signs: true
        update_in_insert: true

      hnd = .with .diagnostic.on_publish_diagnostics, opts
      .handlers["textDocument/publishDiagnostics"] = hnd
}

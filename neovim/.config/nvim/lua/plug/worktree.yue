import "macros" as { $ }

state =
  current: nil

switch_tree = (op, md) ->
  return unless op == "switch"

  if md.path == state.current
    return

  -- don't restart everything if we're already running
  state.current = md.path

  import "plenary.job" as pjob
  -- get git repo
  job = pjob\new
    command: "git"
    args:
      * "remote"
      * "get-url"
      * "--push"
      * "origin"
  v = job\sync!

  -- { "git@blahblah:blah/blah.git": { "compose": "rel/path/to/docker-compose.yml", "name": "shortname" } }
  fp, err = io.open "#{ vim.fn.stdpath "data"}/nvim-composed.json"
  if err
    error err
  data = fp\read "a*"
  fp\close!

  cfg = vim.json.decode data
  cfg = cfg[v[1]]
  return unless cfg

  path = cfg.compose
  name = cfg.name

  -- already composing?
  job = pjob\new
    command: "docker-compose"
    args:
      * "-p"
      * name
      * "-f"
      * path
      * "ps"
      * "-q"
    cwd: md.prev_path
  r = job\sync!
  fail = not (job.code == 0)

  if #r>0 and (not fail)
    job = pjob\new
      command: "docker-compose"
      args:
        * "-p"
        * name
        * "-f"
        * path
        * "down"
      cwd: md.prev_path
    x = job\sync 30000

  job = pjob\new
    command: "docker-compose"
    args:
      * "-p"
      * name
      * "-f"
      * path
      * "up"
      * "-d"
    cwd: md.path
  job\start!

export default {
  config: ->
    import "git-worktree" as gw
    import "telescope" as ts
    import "which-key" as wk

    gw.setup {}
    ts.load_extension "git_worktree"

    wk.register {
      "l":
        * ":lua require('telescope').extensions.git_worktree.git_worktrees()<CR>"
        * "list git worktrees"
      "n":
        * ":lua require('telescope').extensions.git_worktree.create_git_worktree()<CR>"
        * "create git worktree"
    }, { mode: "n", prefix: "<leader>g", noremap: true, silent: true }

    gw.on_tree_change switch_tree
}

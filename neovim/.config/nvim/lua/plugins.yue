import "macros" as { $ }
import "packer" as packer

plugs =
  * {
    "nvim-treesitter/nvim-treesitter",
    run: $do_run "treesitter"
    config: $do_cfg "treesitter"
  }
  * "tpope/vim-eunuch"
  * "nvim-lua/plenary.nvim"
  * {
    "nvim-telescope/telescope.nvim"
    config: $do_cfg "telescope"
    requires:
      * "nvim-lua/plenary.nvim"
      * "nvim-lua/popup.nvim"
  }
  * {
    "nvim-telescope/telescope-ui-select.nvim"
    config: $do_cfg "telescope_ui_select"
    requires:
      "nvim-telescope/telescope.nvim"
  }
  * {
    "elihunter173/dirbuf.nvim"
    config: $do_cfg "dirbuf"
  }
  * {
    "talek/obvious-resize"
    config: $do_cfg "obvious_resize"
  }
  * {
    "lukas-reineke/indent-blankline.nvim"
    config: $do_cfg "indent"
  }
  * {
    "ahmedkhalf/project.nvim"
    config: $do_cfg "project"
    requires:
      * "nvim-telescope/telescope.nvim"
  }
  * { -- layout preserving bdelete
    "famiu/bufdelete.nvim"
    config: $do_cfg "bufdelete"
  }
  * {
    "folke/which-key.nvim"
    config: ->
      import "which-key" as wk

      wk.setup {}
  }

  -- note taking
  * {
    "renerocksai/telekasten.nvim"
    config: $do_cfg "telekasten"
  }

  -- color schemes
  * {
    "chrsm/paramount-ng.nvim"
    config: $do_cfg "paramount"
    requires:
      * "rktjmp/lush.nvim"
  }

  -- ui
  * "nvim-lua/popup.nvim"
  * {
    "akinsho/bufferline.nvim"
    config: $do_cfg "bufferline"
    requires:
      * "kyazdani42/nvim-web-devicons"
  }
  * {
    "nvim-lualine/lualine.nvim"
    config: $do_cfg "lualine"
    requires:
      * "kyazdani42/nvim-web-devicons"
  }
  * {
    "folke/twilight.nvim",
    config: $do_cfg "twilight"
  }
  * {
    "numToStr/FTerm.nvim"
    config: $do_cfg "fterm"
  }

  -- dev related, but not lang-specific
  * "nathom/filetype.nvim"
  * "dense-analysis/ale"
  * "f-person/git-blame.nvim"
  * "rhysd/committia.vim"
  * {
    "sindrets/diffview.nvim",
    config: $do_cfg "diffview",
    requires:
      * "nvim-lua/plenary.nvim"
  }
  * {
    "TimUntersberger/neogit",
    config: $do_cfg "neogit"
    requires:
      * "nvim-lua/plenary.nvim"
      * "sindrets/diffview.nvim"
  }
  * {
    "ethanholz/nvim-lastplace"
    config: $do_cfg "lastplace"
  }
  * {
    "mfussenegger/nvim-dap"
    config: $do_cfg "dap"
  }
  * {
    "rcarriga/nvim-dap-ui"
    config: $do_cfg "dap_ui"
    requires:
      * "mfussenegger/nvim-dap"
  }
  * {
    "theHamsta/nvim-dap-virtual-text"
    config: $do_cfg "dap_vtext"
    requires:
      * "mfussenegger/nvim-dap"
  }
  * {
    "hkupty/iron.nvim"
    config: $do_cfg "iron"
    commit: "bc9c596d6a97955f0306d2abcc10d9c35bbe2f5b"
  }
  * {
    "m-demare/attempt.nvim"
    config: $do_cfg "attempt"
    requires:
      * "nvim-telescope/telescope.nvim"
      * "nvim-telescope/telescope-ui-select.nvim"
  }

  -- LSP and related tooling
  * {
    "williamboman/nvim-lsp-installer"
    config: $do_cfg "lsp_installer"
    requires:
      * "neovim/nvim-lspconfig"
  }
  * "nvim-lua/lsp-status.nvim"
  * "nvim-lua/diagnostic-nvim"
  * "sbdchd/neoformat"
  * "glepnir/lspsaga.nvim"
  * {
    "hrsh7th/nvim-cmp"
    config: $do_cfg "cmp"
    wants:
      * "LuaSnip"
    requires:
      * "hrsh7th/cmp-nvim-lsp"
      * "hrsh7th/cmp-buffer"
      * "ray-x/cmp-treesitter"
      * {
        "ray-x/lsp_signature.nvim"
        config: $do_cfg "lsp_sig"
      }
      * {
        "L3MON4D3/LuaSnip"
        wants: "friendly-snippets"
        config: $do_cfg "luasnip"
      }
      * "onsails/lspkind.nvim"
  }

  -- language specific
  * "pigpigyyy/Yuescript-vim"

  * {
    "leoluz/nvim-dap-go"
    config: $do_cfg "dap_go"
  }

rocks =
  * "lua-cjson"
  * "luafilesystem"
  * "lsqlite3"
  * "xmlua"

export default {
  setup: (needs_bootstrap) ->
    packer.startup (use) ->
      use "wbthomason/packer.nvim"
      use_rocks v for _, v in ipairs rocks

      for _, v in ipairs plugs
        use v

      if needs_bootstrap
        vim.fn.input "bootstrapping, press any key (exit after)"
        vim.api.nvim_create_autocmd { "User PackerCompileDone" }
          command: "qall"
        require("packer").install!
        require("packer").compile!
}
